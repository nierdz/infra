- name: Provision all servers
  become: true
  hosts: all
  roles:
    - { role: utils, tags: ['utils'] }
    - { role: bind, tags: ['bind'] }
  post_tasks:
    - name: Remove /etc/sudoers.d/kmet
      file:
        path: /etc/sudoers.d/kmet
        state: absent
    # use this ugly hack cause meta: reset_connection does not work
    - name: Remove local control_path to force login again to load group
      local_action: # noqa 504
        module: file
        path: /home/{{ ansible_user }}/.ssh/{{ ansible_env.SUDO_USER }}@{{ inventory_hostname }}:22
        state: absent
      changed_when: false

- name: Provision xmr-stak
  become: true
  hosts: xmrstak
  roles:
    - { role: xmr-stak, tags: ['xmr-stak'] }

- name: Provision hypervisors
  become: true
  hosts: docker
  vars_files:
    - vault_vars/all.yml
  pre_tasks:
    - name: Clone infra-docker repository
      git:
        repo: git@github.com:nierdz/infra-docker.git
        version: "master"
        dest: /infra-docker
        accept_hostkey: true
        track_submodules: true
        update: false
    - name: Push /infra-docker/.env
      template:
        src: vault_files/docker.env
        dest: /infra-docker/.env
        mode: 0400
        owner: root
        group: root
    - name: Create certbot directory
      file:
        path: /infra-docker/certbot
        state: directory
        mode: 0755
        owner: root
        group: root
  roles:
    - { role: docker, tags: ['docker'] }
    - { role: certbot, tags: ['certbot'] }
    - { role: mysql-backup, tags: ['mysql-backup'] }

- name: Configure ip failover
  become: true
  hosts: physical
  roles:
    - { role: ip-failover, tags: ['ip-failover'] }

- name: Configure nextcloud servers
  become: true
  hosts: nextcloud
  vars_files:
    - vault_vars/all.yml
  # First nginx will only create a vhost for certbot
  # Then, second one will create actual vhost
  roles:
    - { role: nginx, tags: ['nginx'], dummy: 'first' }
    - { role: certbot, tags: ['certbot'] }
    - { role: nginx, tags: ['nginx'], dummy: 'second' }
    - { role: mysql, tags: ['mysql'] }
    - { role: php, tags: ['php'] }
    - { role: percona, tags: ['percona'] }
    - { role: nextcloud, tags: ['nextcloud'] }
    - { role: mysql-backup, tags: ['mysql-backup'] }
  pre_tasks:
    - name: Install sury key
      apt_key:
        url: "https://packages.sury.org/php/apt.gpg"
        state: present
    - name: Add sury repositories
      apt_repository:
        repo: "deb https://packages.sury.org/php/ {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes
        filename: 'sury'

- name: Provision transmission
  become: true
  hosts: srv1.igln.fr
  vars_files:
    - vault_vars/transmission.yml
  roles:
    - { role: transmission, tags: ['transmission'] }

- name: Provision Elasticsearch & Kibana
  become: true
  hosts: srv1.igln.fr
  vars_files:
    - vault_vars/es.yml
  roles:
    - { role: elasticsearch, tags: ['elasticsearch'] }
    - { role: kibana, tags: ['kibana'] }
  pre_tasks:
    - name: Fix this damn elasticsearch systemd service unit
      lineinfile:
        path: /usr/lib/systemd/system/elasticsearch.service
        state: present
        create: true
        insertafter: "^SuccessExitStatus=143"
        line: "LimitMEMLOCK=infinity"
    - name: Systemctl daemon-reload
      systemd:
        daemon_reload: yes

- name: Provision beats
  become: true
  hosts: srv1.igln.fr
  vars_files:
    - vault_vars/es.yml
    - vault_vars/all.yml
  roles:
    - { role: filebeat, tags: ['filebeat'] }
    - { role: metricbeat, tags: ['metricbeat'] }
    - { role: packetbeat, tags: ['packetbeat'] }

- name: Provision backuppc
  become: true
  hosts: backup.atelierasap.com
  vars_files:
    - vault_vars/all.yml
  roles:
    - { role: nginx, tags: ['nginx'], dummy: 'first' }
    - { role: certbot, tags: ['certbot'] }
    - { role: nginx, tags: ['nginx'], dummy: 'second' }
    - { role: backuppc, tags: ['backuppc'] }
